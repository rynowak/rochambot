@page "/"
@using Microsoft.Extensions.Logging
@inject GameClient GameClient
@inject ILogger<Index> Logger

<h1>Rochambot!</h1>

@if (UserState.CurrentUser == null || (UserState.CurrentUser != null && !UserState.CurrentUser.IsLoggedIn))
{
    <p>Rochambot is a human-against-bot-army game of Rock, Paper, Scissors. To play you must either 
        login, or build your own Rochambot to play on your behalf.
    </p>
}
else
{
    @if(GameClient.CurrentGame == null)
    {
        <div id="RequestGame">
            <button type="button" class="btn btn-primary btn-lg" onclick="@RequestGame">Request Game</button>
        </div>
        <h1>Active Games:</h1>
        <div class="card-group">
            <ul class="list-group list-group-flush">
            @foreach(var game in GameClient.Games)
            {
                <li class="list-group-item">
                    <div class="card text=center">
                        <h5 class="card-title">@game.Id</h5>
                        <p>
                            Oponent: @game.OponentId
                            Status: @game.CurrentStatus
                        </p>
                        <button class="btn btn-primary" onclick="@(() => PlayGame(game.Id))">Play</button>
                    </div>
                </li>
            }
            </ul>
        </div>
    }
    else
    {

    }

    @if (GameClient.Opponent is null)
    {

    }
    else
    {
        <div class="card-group">
            <div class="card text-center">
                <img class="card-img-top" src='@string.Format($"/images/rock-{winLossStatus}.png")' alt="Rock">
            </div>
            <div class="card text-center">
                <img class="card-img-top" src='@string.Format($"/images/paper-{winLossStatus}.png")' alt="Paper">
            </div>
            <div class="card text-center">
                <img class="card-img-top" src='@string.Format($"/images/scissors-{winLossStatus}.png")' alt="Scissors">
            </div>
        </div>

        <div id="game">
            <button type="button" class="btn btn-primary btn-lg" disabled=@disabled onclick="@(() => Play(Shape.Rock))">
                <i class="fas fa-hand-rock"></i>
            </button>
            <button type="button" class="btn btn-primary btn-lg" disabled=@disabled onclick="@(() => Play(Shape.Paper))">
                <i class="fas fa-hand-paper"></i>
            </button>
            <button type="button" class="btn btn-primary btn-lg" disabled=@disabled onclick="@(() => Play(Shape.Scissors))">
                <i class="fas fa-hand-scissors"></i>
            </button>
        </div>
    }
}



@functions {
    [CascadingParameter] UserStateProvider UserState { get; set; }

    Shape botShape;
    Shape playerShape;
    string status;
    bool disabled = false;
    string winLossStatus = "normal";

    protected override async Task OnInitAsync()
    {
        GameClient.OnStateChanged += UpdateState;
    }

    protected override async Task OnAfterRenderAsync()
    {
        await LoginToGameClient();
    }

    void UpdateState(object sender, EventArgs args)
    {   
        Invoke(() =>
        {
            StateHasChanged();
        });
    }

    async Task LoginToGameClient()
    {
        if (UserState.CurrentUser != null && UserState.CurrentUser.IsLoggedIn)
        {
            await GameClient.SetPlayerId(UserState.CurrentUser);
        }
    } 

    Task Play(Shape playerPick)
    {
        playerShape = playerPick;
        status = "Waiting for bot...";
        disabled = true;
        //await GameClient.PlayShapeAsync(playerPick);
        return Task.CompletedTask;
    }

    async Task RequestGame()
    {
        status = "Requesting game...";
        await GameClient.RequestGameAsync();
        status = "Game found.";
    }

    Task PlayGame(string gameId)
    {
        return Task.CompletedTask;
    }
}
@page "/"
@inject GameClient GameClient

<h1>Rochambot!</h1>

@if(GameClient.CurrentGame == null)
{
    <div id="RequestGame">
        <button type="button" class="btn btn-primary btn-lg" onclick="@RequestGame">Request Game</button>
    </div>
    <h1>Active Games:</h1>
    <div class="card-group">
        <ul class="list-group list-group-flush">
        @foreach(var game in GameClient.Games)
        {
            <li class="list-group-item">
                <div class="card text=center">
                    <h5 class="card-title">@game.Id</h5>
                    <p>
                        Oponent: @game.OponentId
                        Status: @game.CurrentStatus
                    </p>
                    <button class="btn btn-primary" onclick="@(() => PlayGame(game.Id))">Play</button>
                </div>
            </li>
        }
        </ul>
    </div>
}
else
{

}

@if (GameClient.Opponent is null)
{

}
else
{
    <div class="card-group">
        <div class="card text-center">
            <img class="card-img-top" src='@string.Format($"/images/rock-{winLossStatus}.png")' alt="Rock">
        </div>
        <div class="card text-center">
            <img class="card-img-top" src='@string.Format($"/images/paper-{winLossStatus}.png")' alt="Paper">
        </div>
        <div class="card text-center">
            <img class="card-img-top" src='@string.Format($"/images/scissors-{winLossStatus}.png")' alt="Scissors">
        </div>
    </div>

    <div id="game">
        <button type="button" class="btn btn-primary btn-lg" disabled=@disabled onclick="@(() => Play(Shape.Rock))">
            <i class="fas fa-hand-rock"></i>
        </button>
        <button type="button" class="btn btn-primary btn-lg" disabled=@disabled onclick="@(() => Play(Shape.Paper))">
            <i class="fas fa-hand-paper"></i>
        </button>
        <button type="button" class="btn btn-primary btn-lg" disabled=@disabled onclick="@(() => Play(Shape.Scissors))">
            <i class="fas fa-hand-scissors"></i>
        </button>
    </div>
}

@functions {

        Shape botShape;
        Shape playerShape;
        string status;
        bool disabled = false;
        string winLossStatus = "normal";

    protected override async Task OnInitAsync()
    {
        GameClient.OnStateChanged += UpdateState;
        //TODO: Do an auth and pass a persistant Id to this method.
        await GameClient.SetPlayerId();
        //await RequestGame();

    }

    async void UpdateState(object sender, EventArgs args)
    {
        await Invoke(() =>
        {
            StateHasChanged();
        });
    }

    Task PlayGame(string game)
    {
        return Task.CompletedTask;
    }

    Task Play(Shape playerPick)
    {
        playerShape = playerPick;
        status = "Waiting for bot...";
        disabled = true;
        //await GameClient.PlayShapeAsync(playerPick);
        return Task.CompletedTask;
    }

    async Task RequestGame()
    {
        status = "Requesting game...";
        await GameClient.RequestGameAsync();
        status = "Game found.";
    }
}
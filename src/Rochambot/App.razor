@inject GameService Game
@implements IDisposable

<CascadingAuthenticationState>
    <CascadingValue Value="@Game.CurrentGame">
        <Router AppAssembly="@typeof(Program).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        <SignInScreen />
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p>Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@functions {
    protected override void OnInitialized()
    {
        Game.GameChanged += OnGameChanged;
    }

    void IDisposable.Dispose()
    {
        Game.GameChanged -= OnGameChanged;
    }

    private void OnGameChanged(object sender, GameInfo e)
    {
        StateHasChanged();
    }
}